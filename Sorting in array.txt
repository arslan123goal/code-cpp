// Bubble sort
#include<iostream>
using namespace std;
int main()
{
    int n;
    cout<<"Enter the size of array"<<endl;
    cin>>n;
    cout<<"Enter integers in array"<<endl;
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        cin>>arr[i];
    }
    int counter = 1;
    while (counter<n)
    {
        for (int i = 0; i < n-counter; i++)
        {
            if (arr[i]>arr[i+1])
            {
                int temp = arr[i];
                arr[i]=arr[i+1];
                arr[i+1]=temp;
            }
        }
        counter++;
    }
    for (int i = 0; i < n; i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
return 0;
}

// Bubble sort using function, 2nd method
#include<iostream>
#include<vector>
using namespace std;

void bubbleSort(vector<int> &v)
{
    int n = v.size();
    for (int i = 0; i < n-1; i++)
    {
        bool flag = false;
        for (int j = 0; j < n-i-1; j++)
        {
            if (v[j] > v[j+1])
            {
                flag = true;
                swap(v[j] , v[j+1]);
            }
        }
        if(!flag)
        {
            break;
        }
    }
    return;
}

int main()
{
    int n;
    cout<<"Enter the size of vector."<<endl;
    cin>>n;
    vector<int> v(n);
    for (int i = 0; i < n; i++)
    {
        cout<<"Enetr the values in vector."<<endl;
        cin>>v[i];
    }
    bubbleSort(v);

    for (int i = 0; i < n; i++)
    {
        cout<<v[i]<<" ";
    }
    cout<<endl;
return 0;
}

// insertion sort
#include<iostream>
using namespace std;
int main()
{
    int n;
    cout<<"Enter the size of array"<<endl;
    cin>>n;
    int arr[n];
    cout<<"Enter integers in array"<<endl;
    for (int i = 0; i < n; i++)
    {
        cin>>arr[i];
    }
    
    for (int i = 1; i < n; i++)
    {
        int current = arr[i];
        int j = i-1;
        while (arr[j]>current && j>=0)
        {
            arr[j+1]=arr[j];
            j--;
        }
        arr[j+1]=current;
    }
    for (int i = 0; i < n; i++)
    {
        cout<<arr[i]<<" ";
    }
return 0;
}
// Insertion sort 2nd method
#include<iostream>
#include<vector>
using namespace std;
void insertionSort(vector<int> &v)
{
    int n = v.size();
    for (int i = 1; i < n; i++)
    {
        int current_ele = v[i];

        int j = i-1;
        while(j >= 0 && v[j]>current_ele)
        {
            v[j+1] = v[j];
            j--;
        }
        v[j+1] = current_ele;
    }
    return;
}
int main()
{
    int n;
    cout<<"Enter the size of array"<<endl;
    cin>>n;
    vector<int> v(n);
    for (int i = 0; i < n; i++)
    {
        cin>>v[i];
    }
    insertionSort(v);
    for (int i = 0; i < n; i++)
    {
        cout<<v[i]<<" ";
    }cout<<endl;
    
return 0;
}
// Time Complexity = O(n(square)
// Space Complexity = O(1)
// Insertion sort is a stable sorting algorithm

// selection sort
#include<iostream>
using namespace std;
int main()
{
    int n;
    cout<<"Enter the size of array"<<endl;
    cin>>n;
    cout<<"Enter integers in array"<<endl;
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        cin>>arr[i];
    }
    for (int i = 0; i < n-1; i++)
    {
        for (int j = i+1; j < n; j++)
        {
            if (arr[j]<arr[i])
            {
                int temp = arr[j];
                arr[j]=arr[i];
                arr[i]=temp;
            }
        }
    }
    for (int i = 0; i < n; i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
return 0;
}
// Selection sort 2nd method
#include<iostream>
#include<vector>
using namespace std;
void selectionSort(vector<int> &v)
{
    int n=v.size();
    for (int i = 0; i < n-1; i++)
    {
        //finding min element in unsorted array
        int min_index = i;
        for (int j = i+1; j < n; j++)
        {
            if (v[j] < v[min_index])
            {
                min_index = j;
            }
        }
        
        // placing min element at begining
        if(i != min_index)
        {
            swap(v[i], v[min_index]);
        }
    }
    return ;
}
int main()
{
    int n;
    cout<<"Enter the size of array."<<endl;
    cin>>n;
    vector<int> v(n);
    for (int i = 0; i < n; i++)
    {
        // cout<<"Enter values in array."<<endl;
        cin>>v[i];
    }
    selectionSort(v);
    for (int i = 0; i < n; i++)
    {
        cout<<v[i]<<" ";
    }
    
return 0;
}
// time complexity = O(n(square))
// space complexity = O(1)
// selection sort is a unstable sorting algorithm