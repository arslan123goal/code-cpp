// search in a binary search tree
#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node *left, *right;
    Node(int val)
    {
        data = val;
        left = NULL;
        right = NULL;
    }
};
Node* searchInBST(Node* root, int key)
{
    if(root == NULL)
    {
        return NULL;
    }
    if(root->data == key)
    {
        return root;
    }

    // root->data > key
    if(root->data > key)
    {
        return searchInBST(root->left, key);
    }

    //root->data < key
    else
    {
        return searchInBST(root->right, key);
    }
}// Time Complexity --> O(logn)


Node* inorderSucc(Node* root)
{
    Node* curr = root;
    while(curr && curr->left != NULL)
    {
        curr = curr->left;
    }
    return curr;
}

// Delete in Binary Serach tree
Node* DeleteInBst(Node* root, int key)
{
    if(key < root->data)
    {
        root->left = DeleteInBst(root->left, key);
    }
    else if(key > root->data)
    {
        root->right = DeleteInBst(root->right, key);
    }
    // key == root->data
    else
    {
        if(root->left == NULL)
        {
            Node* temp = root->right;
            free(root);
            return temp;
        }
        else if(root->right == NULL)
        {
            Node* temp = root->left;
            free(root);
            return temp;
        }
        Node* temp = inorderSucc(root->right);
        root->data = temp->data;
        root->right = DeleteInBst(root->right, temp->data);
    }
    return root;
}

void inorder(Node* root)
{
    if(root == NULL)
    {
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right); 
}

int main()
{
    Node *root = new Node(4);
    root->left = new Node(2);
    root->right = new Node(5);
    root->left->left = new Node(1);
    root->left->right = new Node(3);
    root->right->right = new Node(6);

    if(searchInBST(root, 5) == NULL)
    {
        cout<<"Key doesn't exist";
    }
    else
    {
        cout<<"Key exists";
    }

    inorder(root);
    cout<<endl;
    root = DeleteInBst(root, 2);
    inorder(root);
    cout<<endl;
return 0;
}
